{"version":3,"sources":["components/Cell.js","components/LifeCanvas.js","helpers.js","App.js","index.js"],"names":["Cell","selectBox","_this","props","row","col","react_default","a","createElement","className","this","boxClass","id","onClick","Component","LifeCanvas","width","cols","rowsArr","i","rows","j","boxId","gridFull","push","src_components_Cell","key","style","arrayClone","arr","JSON","parse","stringify","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","toggle","setState","prevState","dropdownOpen","toggle2","dropdownOpen2","toggleModal","modal","state","toggleModal2","modal2","isPlaying","gridCopy","alert","seedGame","Math","floor","random","gliderGun","acorn","gridSmall","clearButton","gridLarge","playButton","clearInterval","intervalId","setInterval","playGame","speed","pauseButton","slowButton","fastButton","generation","g","g2","count","Array","fill","src_components_LifeCanvas","reactstrap_es","isOpen","caret","color","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.31a20e4d.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nimport \"./Cell.css\";\n\n\nclass Cell extends Component {\n    selectBox = () => {\n        this.props.selectBox(this.props.row, this.props.col)\n\n    }\nrender (){\n    return (\n        <div className={this.props.boxClass} id={this.props.id} onClick={this.selectBox} />\n    )\n}\n}\n\nexport default Cell;\n","import React, { Component } from \"react\";\n\nimport \"./LifeCanvas.css\";\nimport Cell from \"./Cell\";\n\nclass LifeCanvas extends Component {\n  render() {\n    const width = (this.props.cols * 14) +1;\n    var rowsArr = [];\n\n    var boxClass = \"\";\n\n\n    for (let i = 0; i < this.props.rows; i++) {\n      for (let j = 0; j < this.props.cols; j++) {\n        let boxId = i + \"_\" + j;\n        boxClass = this.props.gridFull[i][j] ? \"box on\" : \"box off\";\n        rowsArr.push(\n          <Cell\n            boxClass={boxClass}\n            key={boxId}\n            boxId={boxId}\n            row={i}\n            col={j}\n            selectBox={this.props.selectBox}\n          />\n        );\n      }\n    }\n    return (\n      <div className=\"grid\" style={{ width: width }}>\n        { rowsArr }\n      </div>\n    );\n  }\n}\n\nexport default LifeCanvas;\n","function arrayClone(arr) {\n  return JSON.parse(JSON.stringify(arr));\n}\n\n\n\nexport default arrayClone;\n","import React, { Component } from \"react\";\n\nimport {\n  Button,\n  ButtonGroup,\n  ButtonDropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n  Modal,\n  ModalHeader,\n  ModalBody\n} from \"reactstrap\";\nimport LifeCanvas from \"./components/LifeCanvas\";\nimport \"./App.css\";\nimport arrayClone from \"./helpers\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.speed = 1;\n    this.rows = 30;\n    this.cols = 50;\n    this.state = {\n      generation: 0,\n      gridFull: Array(this.rows).fill(Array(this.cols).fill(false)),\n      isPlaying: false,\n      dropdownOpen: false,\n      dropdownOpen2: false,\n      modal: false,\n      modal2: false\n    };\n  }\n\n  toggle = () => {\n    this.setState(prevState => ({\n      dropdownOpen: !prevState.dropdownOpen\n    }));\n  };\n\n  toggle2 = () => {\n    this.setState(prevState => ({\n      dropdownOpen2: !prevState.dropdownOpen2\n    }));\n  };\n\n  toggleModal = () => {\n    this.setState({\n      modal: !this.state.modal\n    });\n  };\n\n  toggleModal2 = () => {\n    this.setState({\n      modal2: !this.state.modal2\n    });\n  };\n\n  selectBox = (row, col) => {\n    if (this.state.isPlaying === false) {\n      let gridCopy = arrayClone(this.state.gridFull);\n      gridCopy[row][col] = !gridCopy[row][col];\n      this.setState({\n        gridFull: gridCopy\n      });\n    } else {\n      alert(\"Simulation in progress – cannot select cell!\");\n    }\n  };\n\n  seedGame = () => {\n    if (this.state.isPlaying === false) {\n      let gridCopy = arrayClone(this.state.gridFull);\n      for (let i = 0; i < this.rows; i++) {\n        for (let j = 0; j < this.cols; j++) {\n          if (Math.floor(Math.random() * 4) === 1) {\n            gridCopy[i][j] = true;\n          }\n        }\n      }\n      this.setState({\n        gridFull: gridCopy\n      });\n    } else {\n      alert(\"Simulation in progress – cannot seed game!\");\n    }\n  };\n\n  gliderGun = () => {\n    if (this.state.isPlaying === false) {\n      let gridCopy = arrayClone(this.state.gridFull);\n      gridCopy[5][1] = true;\n      gridCopy[6][1] = true;\n      gridCopy[5][2] = true;\n      gridCopy[6][2] = true;\n      gridCopy[5][11] = true;\n      gridCopy[6][11] = true;\n      gridCopy[7][11] = true;\n      gridCopy[4][12] = true;\n      gridCopy[8][12] = true;\n      gridCopy[3][13] = true;\n      gridCopy[9][13] = true;\n      gridCopy[3][14] = true;\n      gridCopy[9][14] = true;\n      gridCopy[6][15] = true;\n      gridCopy[4][16] = true;\n      gridCopy[8][16] = true;\n      gridCopy[5][17] = true;\n      gridCopy[6][17] = true;\n      gridCopy[7][17] = true;\n      gridCopy[6][18] = true;\n      gridCopy[3][21] = true;\n      gridCopy[4][21] = true;\n      gridCopy[5][21] = true;\n      gridCopy[3][22] = true;\n      gridCopy[4][22] = true;\n      gridCopy[5][22] = true;\n      gridCopy[2][23] = true;\n      gridCopy[6][23] = true;\n      gridCopy[1][25] = true;\n      gridCopy[2][25] = true;\n      gridCopy[6][25] = true;\n      gridCopy[7][25] = true;\n      gridCopy[3][35] = true;\n      gridCopy[4][35] = true;\n      gridCopy[3][36] = true;\n      gridCopy[4][36] = true;\n      this.setState({\n        gridFull: gridCopy\n      });\n    } else {\n      alert(\"Simulation in progress – cannot seed game!\");\n    }\n  };\n\n  acorn = () => {\n    if (this.state.isPlaying === false) {\n      let gridCopy = arrayClone(this.state.gridFull);\n      gridCopy[13][19] = true;\n      gridCopy[13][20] = true;\n      gridCopy[11][20] = true;\n      gridCopy[12][22] = true;\n      gridCopy[13][23] = true;\n      gridCopy[13][24] = true;\n      gridCopy[13][25] = true;\n      this.setState({\n        gridFull: gridCopy\n      });\n    } else {\n      alert(\"Simulation in progress – cannot seed game!\");\n    }\n  };\n\n  gridSmall = () => {\n    this.rows = 20;\n    this.cols = 40;\n    this.clearButton();\n  };\n\n  gridLarge = () => {\n    this.rows = 30;\n    this.cols = 50;\n    this.clearButton();\n  };\n\n  playButton = () => {\n    clearInterval(this.intervalId);\n    this.intervalId = setInterval(this.playGame, this.speed);\n  };\n\n  pauseButton = () => {\n    clearInterval(this.intervalId);\n    this.setState({\n      isPlaying: false\n    });\n  };\n\n  slowButton = () => {\n    this.speed = 800;\n    this.playButton();\n  };\n\n  fastButton = () => {\n    this.speed = 1;\n    this.playButton();\n  };\n\n  clearButton = () => {\n    clearInterval(this.intervalId);\n    let gridCopy = arrayClone(this.state.gridFull);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.cols; j++) {\n        gridCopy[i][j] = false;\n      }\n    }\n    this.setState({\n      gridFull: gridCopy,\n      generation: 0,\n      isPlaying: false\n    });\n  };\n\n  playGame = () => {\n    let g = this.state.gridFull;\n    let g2 = arrayClone(this.state.gridFull);\n\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.cols; j++) {\n        let count = 0;\n        //checking each neighbor\n        if (i > 0) if (g[i - 1][j]) count++;\n        if (i > 0 && j > 0) if (g[i - 1][j - 1]) count++;\n        if (i > 0 && j < this.cols - 1) if (g[i - 1][j + 1]) count++;\n        if (j < this.cols - 1) if (g[i][j + 1]) count++;\n        if (j > 0) if (g[i][j - 1]) count++;\n        if (i < this.rows - 1) if (g[i + 1][j]) count++;\n        if (i < this.rows - 1 && j > 0) if (g[i + 1][j - 1]) count++;\n        if (i < this.rows - 1 && j < this.cols - 1)\n          if (g[i + 1][j + 1]) count++;\n        if (g[i][j] && (count < 2 || count > 3)) g2[i][j] = false;\n        if (!g[i][j] && count === 3) g2[i][j] = true;\n      }\n    }\n    this.setState({\n      gridFull: g2,\n      isPlaying: true,\n      generation: this.state.generation + 1\n    });\n  };\n\n  componentDidMount() {\n    this.seedGame();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Conway's Game of Life</h1>\n        <LifeCanvas\n          gridFull={this.state.gridFull}\n          rows={this.rows}\n          cols={this.cols}\n          selectBox={this.selectBox}\n        />\n\n        <h2>\n          Generations:<div className=\"innerbox\">{this.state.generation}</div>\n        </h2>\n        <ButtonGroup className=\"buttons\">\n          <Button onClick={this.playButton}>Play</Button>\n          <Button onClick={this.pauseButton}>Pause</Button>\n          <Button onClick={this.clearButton}>Clear</Button>\n          <Button onClick={this.seedGame}>Seed</Button>\n          <Button onClick={this.slowButton}>Slow</Button>\n          <Button onClick={this.fastButton}>Fast</Button>\n          <ButtonDropdown\n            className=\"dropup\"\n            isOpen={this.state.dropdownOpen}\n            toggle={this.toggle}\n          >\n            <DropdownToggle caret>Patterns</DropdownToggle>\n            <DropdownMenu>\n              <DropdownItem onClick={this.gliderGun}>Glider Gun</DropdownItem>\n              <DropdownItem onClick={this.acorn}>Acorn</DropdownItem>\n            </DropdownMenu>\n          </ButtonDropdown>\n          <ButtonDropdown\n            className=\"dropup\"\n            isOpen={this.state.dropdownOpen2}\n            toggle={this.toggle2}\n          >\n            <DropdownToggle caret>Size</DropdownToggle>\n            <DropdownMenu>\n              <DropdownItem onClick={this.gridSmall}>Small</DropdownItem>\n              <DropdownItem onClick={this.gridLarge}>Large</DropdownItem>\n            </DropdownMenu>\n          </ButtonDropdown>\n        </ButtonGroup>\n        <span>\n          <Button className=\"modals\" color=\"danger\" onClick={this.toggleModal}>\n            Rules\n          </Button>\n          <Modal\n            isOpen={this.state.modal}\n            toggle={this.toggleModal}\n            className={this.props.className}\n          >\n            <ModalHeader toggle={this.toggleModal}>Rules</ModalHeader>\n            <ModalBody>\n              <ol>\n                <li>\n                  Any live cell with fewer than two live neighbors dies, as if\n                  by underpopulation.\n                </li>\n                <li>\n                  Any live cell with two or three live neighbors lives on to the\n                  next generation.\n                </li>\n                <li>\n                  Any live cell with more than three live neighbors dies, as if\n                  by overpopulation.\n                </li>\n                <li>\n                  Any dead cell with exactly three live neighbors becomes a live\n                  cell, as if by reproduction\n                </li>\n              </ol>\n            </ModalBody>\n          </Modal>\n        </span>\n        <span>\n          <Button className=\"modals\" color=\"danger\" onClick={this.toggleModal2}>\n            About\n          </Button>\n          <Modal\n            isOpen={this.state.modal2}\n            toggle={this.toggleModal2}\n            className={this.props.className}\n          >\n            <ModalHeader toggle={this.toggleModal2}>About</ModalHeader>\n            <ModalBody>\n              The Game of Life, also known simply as Life, is a cellular\n              automaton devised by the British mathematician John Horton Conway\n              in 1970. The game is a zero-player game, meaning that its\n              evolution is determined by its initial state, requiring no further\n              input. One interacts with the Game of Life by creating an initial\n              configuration and observing how it evolves, or, for advanced\n              players, by creating patterns with particular properties.\n            </ModalBody>\n          </Modal>\n        </span>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n"],"sourceRoot":""}